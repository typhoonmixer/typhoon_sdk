class Hasher {
    constructor() {
        this.p = BigInt('21888242871839275222246405745257275088548364400416034343698204186575808495617');
        this.c = [
            BigInt(0),
            BigInt('25823191961023811529686723375255045606187170120624741056268890390838310270028'),
            BigInt('71153255768872006974285801937521995907343848376936063113800887806988124358800'),
            BigInt('51253176922899201987938365653129780755804051536550826601168630951148399005246'),
            BigInt('66651710483985382365580181188706173532487386392003341306307921015066514594406'),
            BigInt('45887003413921204775397977044284378920236104620216194900669591190628189327887'),
            BigInt('14399999722617037892747232478295923748665564430258345135947757381904956977453'),
            BigInt('29376176727758177809204424209125257629638239807319618360680345079470240949145'),
            BigInt('13768859312518298840937540532277016512087005174650120937309279832230513110846'),
            BigInt('54749662990362840569021981534456448557155682756506853240029023635346061661615'),
            BigInt('25161436470718351277017231215227846535148280460947816286575563945185127975034'),
            BigInt('90370030464179443930112165274275271350651484239155016554738639197417116558730'),
            BigInt('92014788260850167582827910417652439562305280453223492851660096740204889381255'),
            BigInt('40376490640073034398204558905403523738912091909516510156577526370637723469243'),
            BigInt('903792244391531377123276432892896247924738784402045372115602887103675299839'),
            BigInt('112203415202699791888928570309186854585561656615192232544262649073999791317171'),
            BigInt('114801681136748880679062548782792743842998635558909635247841799223004802934045'),
            BigInt('111440818948676816539978930514468038603327388809824089593328295503672011604028'),
            BigInt('64965960071752809090438003157362764845283225351402746675238539375404528707397'),
            BigInt('98428510787134995495896453413714864789970336245473413374424598985988309743097')
        ];
    }

    addmod(a, b, m) {
        return (a + b) % m;
    }

    mulmod(a, b, m) {
        return (a * b) % m;
    }

    MiMC5Feistel(iL, iR, k) {
        const nRounds = 20;
        let lastL = BigInt(iL);
        let lastR = BigInt(iR);

        for (let i = 0; i < nRounds; i++) {
            let mask = this.addmod(lastR, k, this.p);
            mask = this.addmod(mask, this.c[i], this.p);

            let mask2 = this.mulmod(mask, mask, this.p);
            let mask4 = this.mulmod(mask2, mask2, this.p);
            mask = this.mulmod(mask4, mask, this.p);

            let temp = lastR;
            lastR = this.addmod(lastL, mask, this.p);
            lastL = temp;
        }

        return [lastL, lastR];
    }

    MiMC5Sponge(inputs, k) {
        let lastR = BigInt(0);
        let lastC = BigInt(0);

        for (let i = 0; i < inputs.length; i++) {
            lastR = this.addmod(lastR, BigInt(inputs[i]), this.p);
            [lastR, lastC] = this.MiMC5Feistel(lastR, lastC, BigInt(k));
        }

        return lastR;
    }
}

export default Hasher
